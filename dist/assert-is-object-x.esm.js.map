{"version":3,"sources":["../src/assert-is-object-x.js"],"names":[],"mappings":"AAAA,OAAO,YAAP,MAAyB,+BAAzB;AACA,OAAO,WAAP,MAAwB,gBAAxB;AAEA;;;;;;;;;;AASA,IAAM,cAAc,GAAG,SAAS,cAAT,CAAwB,KAAxB,EAA+B,OAA/B,EAAwC;AAC7D,MAAI,WAAW,CAAC,KAAD,CAAf,EAAwB;AACtB,QAAM,GAAG,GAAG,SAAS,CAAC,MAAV,GAAmB,CAAnB,GAAuB,YAAY,CAAC,OAAD,CAAnC,aAAkD,YAAY,CAAC,KAAD,CAA9D,sBAAZ;AAEA,UAAM,IAAI,SAAJ,CAAc,GAAd,CAAN;AACD;;AAED,SAAO,KAAP;AACD,CARD;;AAUA,eAAe,cAAf","file":"assert-is-object-x.esm.js","sourcesContent":["import safeToString from 'to-string-symbols-supported-x';\nimport isPrimitive from 'is-primitive-x';\n\n/**\n * Tests `value` to see if it is an object, throws a `TypeError` if it is\n * not. Otherwise returns the `value`.\n *\n * @param {*} value - The argument to be tested.\n * @param {string} [message] - An alternative user message.\n * @throws {TypeError} Throws if `value` is not an object.\n * @returns {*} Returns `value` if it is an object.\n */\nconst assertIsObject = function assertIsObject(value, message) {\n  if (isPrimitive(value)) {\n    const msg = arguments.length > 1 ? safeToString(message) : `${safeToString(value)} is not an object`;\n\n    throw new TypeError(msg);\n  }\n\n  return value;\n};\n\nexport default assertIsObject;\n"]}